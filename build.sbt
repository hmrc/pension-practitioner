import play.sbt.routes.RoutesKeys
import uk.gov.hmrc.DefaultBuildSettings.integrationTestSettings
import uk.gov.hmrc.SbtArtifactory
import uk.gov.hmrc.sbtdistributables.SbtDistributablesPlugin.publishingSettings
import scoverage.ScoverageKeys

import scala.util.matching.Regex

val appName = "pension-practitioner"

lazy val microservice = Project(appName, file("."))
  .disablePlugins(JUnitXmlReportPlugin)
  .enablePlugins(play.sbt.PlayScala, SbtAutoBuildPlugin, SbtGitVersioning, SbtDistributablesPlugin, SbtArtifactory)
  .settings(
    majorVersion := 0,
    libraryDependencies ++= AppDependencies.compile ++ AppDependencies.test
  )
  .settings(scalaVersion := "2.12.11")
  .settings(publishingSettings: _*)
  .settings(
    RoutesKeys.routesImport ++= Seq("models.enumeration.JourneyType"),
    PlayKeys.devSettings += "play.server.http.port" -> "8209"
  )
  .configs(IntegrationTest)
  .settings(silencerSettings)
  .settings(integrationTestSettings(): _*)
  .settings(
    ScoverageKeys.coverageExcludedFiles := "<empty>;Reverse.*;.*repository.*;" +
      ".*BuildInfo.*;.*javascript.*;.*Routes.*;.*GuiceInjector;",
    ScoverageKeys.coverageMinimum := 80,
    ScoverageKeys.coverageFailOnMinimum := true,
    ScoverageKeys.coverageHighlighting := true
  )
  .settings(resolvers += Resolver.jcenterRepo)

lazy val silencerSettings: Seq[Setting[_]] = {

  val paramValueNeverUsed: Regex = """^(parameter value)(.*)(is never used)$""".r

  val silencerVersion = "1.7.0"

  Seq(
    libraryDependencies ++= Seq(
      compilerPlugin("com.github.ghik" % "silencer-plugin" % silencerVersion cross CrossVersion.full)
    ),
    // silence all warnings on autogenerated files
    scalacOptions += "-P:silencer:pathFilters=target/.*",
    // silence implicit parameter value is never used warnings
    scalacOptions += s"-P:silencer:globalFilters=$paramValueNeverUsed",
    // Make sure you only exclude warnings for the project directories, i.e. make builds reproducible
    scalacOptions += s"-P:silencer:sourceRoots=${baseDirectory.value.getCanonicalPath}"
  )
}
